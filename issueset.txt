ch01:mymore.c
	关于标准输入输出的缓冲区问题。像getchar gets 等这种C 标准库中的输入输出，都是从标准输入缓冲区读入，输出到标准输出的缓冲区的。用能听懂的话讲，就是你从键盘的输入的东西，它都是放在标准输入缓冲区中的，当你按下enter键的时候，才开始往getchar gets中读。 输出的时候也是输出到缓冲区中去，当遇到\n或者强制刷新的时候，才往屏幕上显示的。
	当使用getchar时，会因为缓冲区的问题，读入\n，其实这个enter键只是表明结束这次的输入，但是依然会保存到缓冲区中去，因此getchar依然会读取到。还有如果下次使用getchar时，缓冲区依然还有残留值，getchar会继续读入，而不需要等待我们输入，因为上次的enter已经让缓冲区有内容了，getchar只要是缓冲区有内容，就能继续读，而不是等待我们输入。
	未避免缓冲区的残留对新的输入或者输出造成影响：在每个最后不带\n的printf后面加fflush(stdout);在每个不想受接收缓冲区旧内容影响的scanf前面加rewind(stdin);另外请检查scanf的返回值。
	
	清空输入缓冲区。rewind
	立即刷新输出缓冲区/即立即将输出缓冲区输入到屏幕。 fflush

	ref：http://bbs.csdn.net/topics/390471195
	http://www.cnblogs.com/sky-heaven/p/5016401.html
	http://blog.csdn.net/gaopu12345/article/details/30457329
	https://zhidao.baidu.com/question/567502664.html

关于 printf("\033[7m more? \033[m"); \033[xxx 表示设置颜色。
ref： http://bbs.csdn.net/topics/380060335
https://zhidao.baidu.com/question/198689143734913405.html

关于puts gets getc putc getchar<=>getc(stdin) putchar  fputs fgets fgetc fputc: 
以上都是为标准IO(C标准库)设计的。不带f是默认文件指针指向标准输出，输入的。 带f是指定文件指针。puts 为输出添加\n。gets读取换行符并将其丢弃。fputs，fgets 没有，该怎样就怎样。
标准IO 是带缓冲的IO，就是说，标准I/O默认采用了缓冲机制，比如调用fopen函数，不仅打开一个文件，而且建立了一个缓冲区（读写模式下将建立两个缓冲区），还创建了一个包含文件和缓冲区相关数据的数据结构。比如读取标准输入时，实际上是将标准输入如键盘，放到一个缓冲区中去。 当遇到\n或者强制输入时，才会将缓冲区的内容读取到程序中。输出到标准输出时，是将输出内容放到输出缓冲区，当遇到\n或者强制刷新输出时，才会输出到标准输出,即屏幕上去。
如果尝试读取达到文件结尾，标准IO的getc会返回特殊值EOF，而fgets碰到EOF会返回NULL。 单个字符的是EOF， 一整个字符串的gets是NULL。
IO：标准IO（带缓冲）和文件IO（不带缓冲）。前者一般是C标准库API，如fread fgets；后者是系统API，如read，write。
ref：
http://blog.csdn.net/lemon_fantasy/article/details/3394651
https://zhidao.baidu.com/question/581325672.html
http://bbs.csdn.net/topics/20422642


关于read 也是有缓冲区。
ssize_t read(int fd, void *buf, size_t count);
参数count是请求读取的字节数，读上来的数据保存在缓冲区buf中，同时文件的当前读写位置向后移。注意这个读写位置和使用C标准I/O库时的读写位置有可能不同，这个读写位置是记在内核中的，而使用C标准I/O库时的读写位置是用户空间I/O缓冲区中的位置。比如用fgetc读一个字节，fgetc有可能从内核中预读1024个字节到I/O缓冲区中，再返回第一个字节，这时该文件在内核中记录的读写位置是1024，而在FILE结构体中记录的读写位置是1。注意返回值类型是ssize_t，表示有符号的size_t，这样既可以返回正的字节数、0（表示到达文件末尾）也可以返回负值-1（表示出错）。
read函数返回时，返回值说明了buf中前多少个字节是刚读上来的。有些情况下，实际读到的字节数（返回值）会小于请求读的字节数count，例如：读常规文件时，在读到count个字节之前已到达文件末尾。例如，距文件末尾还有30个字节而请求读100个字节，则read返回30，下次read将返回0。


关于使用键盘一输入就立即接收，而不是按enter键之后再处理。
使用getch 不是C标准库。linux 中使用curses.h
gcc 添加库 gcc mymore.c -lcurses
xcode 中添加库。Taraget->Build Settings->Other Linker Flags->加上 -lcurses
xcode中出错 Error opening terminal: unknown。
使用更改终端方法来进行即时输出。http://bbs.csdn.net/topics/390850485
ref：
https://zhidao.baidu.com/question/231739888.html
https://baike.baidu.com/item/getch()/10996394
https://baike.baidu.com/item/getch/919674?fr=aladdin
http://blog.chinaunix.net/uid-46552-id-2116326.html
http://www.cnblogs.com/Quains/archive/2013/08/22/3276425.html
https://stackoverflow.com/questions/4919373/xcode-and-curses-h-with-error-opening-terminal

从Unix中学习Unix。(解决思路，如查看相关命令或者函数或者头文件等)
1.阅读联机帮助。（man）
2.搜索联机帮助。（man -k）
3.阅读.h文件。
4.从参阅部分(SEE ALSO)得到启示。
5.如果想查阅具体命令实现，可直接看源码。一般发行版的程序中只有头文件/usr/include 和库文件/usr/lib，不会有源文件。你要自己下载相关的源文件，或者用命令下载源文件(这个一般会放置在/usr/src 下)。

eg:查看命令用法及源码实现。who。
man who 查看who的功能用法。
which who /whereis who/locate who /find who 。。 查找命令所在位置。一般在/usr/bin /bin下的。
从man中知道who的头文件，库文件等，一般放在/usr/include /usr/lib中的。 如果不知道位置，通过文件名 来locate / find 也可以。
如果有源文件，一般是在/usr/src中。可以通过文件名locate / find 来查找。 
如果没有源文件，可以通过dpkg -S /usr/bin/who 找到相关源文件的包，然后下载下来，查看其源文件。
一般以上步骤基本都能在本机中解决，且更权威，如果实在查询不到，或者实在看不懂，最后大杀器，google， 百度了。


man 2 open :
其中2表示是在man手册中第2节。man手册有多个小节。 第1节是shell命令。 第2节是库函数等。

open中第三个参数， 0666 生成的文件并不是rw_rw_rw？ 因为还会受到进程权限的影响。和umask有关。 umask与文件/目录生成的权限相关。一般如果没有设定权限，那么生成的文件/目录 权限就是文件：默认权限666 & ~022 ， 目录:默认权限777 & ~022. 文件默认的权限666，目录默认权限是777. 即最后的权限 = 文件权限 & ~umask. 如设置666，umask是022， 那么生成的文件/目录权限666 & ~022 = 666 & 755 =644.
如果程序中设置文件/目录权限为633，那么最终权限 633&~022 = 633&755 = 611. 
ref：
http://bbs.csdn.net/topics/390871259
https://baike.baidu.com/item/umask/6048811?fr=aladdin



TODO:
who am i 显示一条信息，当前用户的当前终端。 如何获得当前终端的用户名？tty 命令如何实现， ttyname ttys 等。


whoam 和 who am i 前者是显示当前操作用户信息，后者是显示当前登录用户的信息。
当前登录用户可以用getlogin(), 当前操作用户可以用pwd = getpwuid(getuid()); who的实现是读取/var/run/utmp，当前登录用户记录在那个文件中了。
whoami的实现，通过getpwuid。(查看源码得来的，因此whoami显示的是uid的)
所以综上，who显示的是登录时用户的信息，不会随着用户权限的变换发生变化。 whoami显示的当前操作用户的uid。不同的用户的切换会显示不同的uid信息。

关于 uid 和 euid。 通常情况下两者是一样的。每个程序都有自己的uid 和 euid。 对于who，whoami 在test用户时，其uid和euid都是test的id， 在root时，其uid和euid都是root的id。 而who / who am i显示的是登录用户，不是uid和euid，是登录系统的用户名，所以who不管权限怎么切换，显示的都登录用户，不会随着权限的切换而改变。(因为who是在/var/run/utmp 文件中的。这个文件中的记录是记录登录系统的用户，其实这时候不用考虑什么uid和euid。)
而whoami 显示的是uid，会随着权限的切换，test时 显示的是test 的uid ，root时显示的是root的uid。
有效用户ID和有效用户组ID：进程用来决定我们对资源的访问权限。一般情况下，有效用户ID等于实际用户ID，有效用户组ID等于实际用户组ID。当设置-用户-ID（SUID）位设置，则有效用户ID等于文件的所有者的uid，而不是实际用户ID；同样，如果设置了设置-用户组-ID（SGID）位 chmod u+s xxx，则有效用户组ID等于文件所有者的gid，而不是实际用户组ID。
http://blog.csdn.net/ybxuwei/article/details/23563423 好！
http://www.cnblogs.com/SlowDreamer/p/3416499.html
http://keren.blog.51cto.com/720558/144908

看看内置命令的源码实现？ who whoami ,在源码中可以查看到，coreutils包中。


阅读linux 源码 ：/usr/src/linux. http://bbs.csdn.net/topics/330098112
linux 开源的，所以好处就是什么都能找到相应的源码。不管是内核，还是c标准库，或者是内置命令源码，都能下载到系统中，或者单独下载下来。
可能发行版本是不带源码的，要自己在系统中用命令去下载,一般会下载到/usr/src/linux 或者 单独下载源码。 参考 http://blog.csdn.net/jobbofhe/article/details/52137325

关于linux中C标准库源码。纯净的内核是不包含C库的，只包含一些操作系统必需的功能和程序，甚至像bash这样的shell程序也不会有，纯净版本的内核应该是最精简的。C库一般是作为工具链下载进来的。我们安装工具链或者编译器的时候，通常就会下载C标准库。当然这个通常也只是下载库，而不是源码。
要自己去下载源码到/usr/src/linux或者某个工具链目录下如xcode下 或者下载单独的源码如glibc。 xcode闭源的，看不到，只有头文件和库。 https://www.v2ex.com/t/283251
C标准库不在linux内核中，内核源码中的内核库只是实现了一些必要的C标准库的子集(如一些字符串处理等)。内核源码/usr/src/linux。
C标准库不在内核中，是内核外的一些额外库(和其他一般库一样，只是这个C标准库更重要，很多都会用到，基本是作为工具链使用)，一般我们安装编译器或者工具链的时候会安装进来，一般安装的是库，安装在工具链的目录下或者/usr/lib下等。 源码要另外下载。有多个c标准库，不过通常用的是GNU C 库，glibc，可以到gnu官网上下载。 还有uClib等。

（以上说的c库/命令/程序不在内核中也不是绝对的，你自己可以对内核进行裁剪，添加，修改，使其内核带C标准库，这样也是可以的。那这样内核源码中自然也能有C标准的源码了。）

一些常用的命令(ls等)以及必备程序(shell等)一般也会做到linux源码中(看发行版本是否将其加入到内核源码中，没有的话，只能自己额外下载这些程序和命令。)。如果有的话，下载linux源码后，也可以直接在源码中查看其相应命令的源码。如果没有的话，那么这些命令的源码就要自己额外下载了。
linux常用命令和shell内置命令(built-in). 一般源码在coreutils包和binutils包。
关于查找命令，locate which whereis. 命令一般在/usr/bin /bin 下。


查看命令的源码：
参考：http://www.cnblogs.com/sky-heaven/p/5475798.html
http://blog.csdn.net/ljianhui/article/details/46449417
http://bbs.chinaunix.net/thread-3628706-1-1.html 



目前源码：命令的源码：coreutils，binutils。 bash 源码：bash。 C标准库源码：glibc。linux 源码：linux 4.13.4。

说到源码，开源：https://www.kernel.org    http://www.gnu.org
源码分析：http://blog.csdn.net/eastmoon502136/article/details/8711104 好
glibc 源码剖析 http://blog.csdn.net/zhoudaxia/article/details/4620990


在Xcode中为main函数设置输入参数：http://blog.csdn.net/wowfly98/article/details/51733039


c中调用shell命令：http://www.cnblogs.com/niocai/archive/2011/07/20/2111896.html

关于管道和重定向
管道：将上个命令的标准输出作为后一个命令的标准输入。






